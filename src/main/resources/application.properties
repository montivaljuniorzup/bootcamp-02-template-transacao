server.servlet.contextPath=/v1
spring.application.name=transacao

###POSTGRES
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5434/transacao
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=transacao
spring.datasource.password=password

#jpa
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.javax.persistence.query.timeout = 50


###+ Oauth + Keycloack

#Adicionar as deps do spring-boot-starter-oauth2-resource-server e declarar esses dois atributos no application.properties
# já tornam minha aplicação um Resource Server. Agora preciso criar uma classe de config que vai extends WebSecurityConfigurerAdapter
# e vai dizer qual Role (Claims do JWT) vai poder acessar determinado endpoint

##AuthorizationServer
#Onde o Spring Security pode encontrar nosso authorization server. Nesse caso no serviço do Keycloak
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
#onde o Spring Security pode encontrar as chaves para conseguir validar a assinatura do token.
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}


###Log do Security
# Habilitar log para Debug de Segurança

logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.security=DEBUG



###KAFKA

# Endereço do Kafka
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}

# Qual tópico ele irá coletar os eventos
spring.kafka.topic.transactions=transacoes

#propriedades do consumidor
# Formato da chave (String) recebida
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Formato da mensagem \ evento (JSON) recebida(o)
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:minha-aplicacao}

# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}
